main = "Distribución de Disparos por Simulación",
xlab = "Cantidad de Disparos",
col = "lightgreen",
border = "darkgreen")
#Correlaciones entre variables
#Visualiza las correlaciones entre las variables clave (daño, disparos, saltos, etc.).
# Instalar y cargar librería corrplot (si no está instalada)
if (!require(corrplot)) install.packages("corrplot", dependencies = TRUE)
library(corrplot)
# Calcular matriz de correlación
library(corrplot)
numerical_data <- data1 %>%
select(daño.recibido, cantidad.disparos, cantidad.de.impactos, cantidad.de.saltos)
cor_matrix <- cor(numerical_data, use = "complete.obs")
# Heatmap
corrplot(cor_matrix, method = "color", addCoef.col = "black",
tl.col = "black", tl.cex = 0.8,
main = "Matriz de Correlación entre Variables")
# Cargar el archivo CSV
data2 <- read.csv("simulacion_grilla_moviles.csv")
# Verificar las primeras filas del archivo para confirmar la carga
head(data2)
# Inicializar contador para derribados
total_derribados <- 0
# Contar cuántos son verdaderos (True)
for (i in 1:nrow(data2)) {
if (data2$derribado[i] == "True") {
total_derribados <- total_derribados + 1
}
}
# Calcular el total de disparos
total_disparos <- sum(data2$cantidad.disparos)
# Calcular el total de daño recibido
total_dano_recibido <- sum(data2$daño.recibido)
# Calcular la cantidad total de impactos
total_impactos <- sum(data2$cantidad.de.impactos)
# Calcular el total de iteraciones (registros)
total_iteraciones <- nrow(data2)
# Crear la tabla
tabla_resumen2 <- data.frame(
"Total de Iteraciones" = total_iteraciones,
"Cantidad Total de Derribados" = total_derribados,
"Cantidad Total de Disparos" = total_disparos,
"Total de Daño Recibido" = total_dano_recibido,
"Total de Impactos" = total_impactos
)
# Ver la tabla
print(tabla_resumen2)
# Instalar y cargar librería ggplot2 (si no está instalada)
if (!require(ggplot2)) install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
# Histograma de la distribución del "daño recibido" con un rango específico
ggplot(data2, aes(x = daño.recibido)) +
geom_histogram(binwidth = 100, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribución del Daño Recibido", x = "Daño Recibido", y = "Frecuencia") +
xlim(-100, 1500) +  # Ajusta el rango del eje X aquí
theme_minimal()
# Histograma de la distribución de los "disparos" con un rango específico
ggplot(data2, aes(x = cantidad.disparos)) +
geom_histogram(binwidth = 10, fill = "green", color = "black", alpha = 0.7) +
labs(title = "Distribución de la Cantidad de Disparos", x = "Cantidad de Disparos", y = "Frecuencia") +
xlim(-10, 100) +  # Ajusta el rango del eje X aquí
theme_minimal()
# Histograma de la distribución de los "impactos" con un rango específico
ggplot(data2, aes(x = cantidad.de.impactos)) +
geom_histogram(binwidth = 2, fill = "red", color = "black", alpha = 0.7) +
labs(title = "Distribución de la Cantidad de Impactos", x = "Cantidad de Impactos", y = "Frecuencia") +
xlim(-2, 20) +  # Ajusta el rango del eje X aquí
theme_minimal()
# Histograma de la distribución de los "saltos" con un rango específico
ggplot(data2, aes(x = cantidad.de.saltos)) +
geom_histogram(binwidth = 10, fill = "purple", color = "black", alpha = 0.7) +
labs(title = "Distribución de la Cantidad de Saltos", x = "Cantidad de Saltos", y = "Frecuencia") +
xlim(50, 200) +  # Ajusta el rango del eje X aquí
theme_minimal()
# Instalar y cargar librería ggplot2 (si no está instalada)
if (!require(ggplot2)) install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
# Graficar la distribución del "daño recibido" con un rango específico
ggplot(data2, aes(x = daño.recibido)) +
geom_density(fill = "blue", alpha = 0.4) +
labs(title = "Distribución del Daño Recibido", x = "Daño Recibido", y = "Densidad") +
xlim(0, 1500) +  # Ajusta el rango del eje X aquí
theme_minimal()
# Graficar la distribución de los "disparos" con un rango específico
ggplot(data2, aes(x = cantidad.disparos)) +
geom_density(fill = "green", alpha = 0.4) +
labs(title = "Distribución de la Cantidad de Disparos", x = "Cantidad de Disparos", y = "Densidad") +
xlim(0, 100) +  # Ajusta el rango del eje X aquí
theme_minimal()
# Graficar la distribución de los "impactos" con un rango específico
ggplot(data2, aes(x = cantidad.de.impactos)) +
geom_density(fill = "red", alpha = 0.4) +
labs(title = "Distribución de la Cantidad de Impactos", x = "Cantidad de Impactos", y = "Densidad") +
xlim(0, 20) +  # Ajusta el rango del eje X aquí
theme_minimal()
# Graficar la distribución de los "saltos" con un rango específico
ggplot(data2, aes(x = cantidad.de.saltos)) +
geom_density(fill = "purple", alpha = 0.4) +
labs(title = "Distribución de la Cantidad de Saltos", x = "Cantidad de Saltos", y = "Densidad") +
xlim(50, 200) +  # Ajusta el rango del eje X aquí
theme_minimal()
#Daño recibido por avión
#Este gráfico muestra la distribución del daño recibido para los modelos A-10 y F-15.
# Boxplot
boxplot(data2$daño.recibido ~ data2$avion,
main = "Distribución del daño recibido por avión",
xlab = "Modelo de Avión",
ylab = "Daño Recibido",
col = c("lightblue", "pink"),
notch = TRUE)
#Disparos vs Impactos por avión
#Compara los disparos realizados y los impactos exitosos para cada modelo de avión.
# Instalar y cargar librería ggplot2 (si no está instalada)
if (!require(ggplot2)) install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
# Sumar disparos e impactos por avión
library(dplyr)
summary_data2 <- data2 %>%
group_by(avion) %>%
summarise(Disparos = sum(cantidad.disparos),
Impactos = sum(cantidad.de.impactos))
# Crear gráfico de barras apiladas
barplot(t(as.matrix(summary_data2[,-1])),
beside = FALSE,
col = c("skyblue", "orange"),
main = "Disparos vs Impactos por Avión",
xlab = "Modelo de Avión",
ylab = "Cantidad",
legend.text = c("Disparos", "Impactos"),
names.arg = summary_data2$avion)
#Saltos vs. Daño Recibido
#Muestra la relación entre los saltos realizados y el daño recibido por los aviones.
# Scatter plot
plot(data2$cantidad.de.saltos, data2$daño.recibido,
main = "Relación entre Saltos y Daño Recibido",
xlab = "Cantidad de Saltos",
ylab = "Daño Recibido",
col = ifelse(data2$avion == "A10", "blue", "red"),
pch = 16)
legend("topright", legend = c("A-10", "F-15"), col = c("blue", "red"), pch = 16)
#Porcentaje de aviones derribados
#Representa la proporción de aviones derribados frente a los que alcanzaron el objetivo.
# Calcular proporciones
derribados <- table(data2$derribado)
labels <- paste(names(derribados),
round(100 * derribados / sum(derribados), 1), "%")
# Gráfico de pastel
pie(derribados,
labels = labels,
main = "Porcentaje de Aviones Derribados",
col = c("green", "red"))
#Disparos por simulación
#Muestra la distribución de la cantidad de disparos realizados en todas las simulaciones.
# Histograma
hist(data2$cantidad.disparos,
breaks = 20,
main = "Distribución de Disparos por Simulación",
xlab = "Cantidad de Disparos",
col = "lightgreen",
border = "darkgreen")
#Correlaciones entre variables
#Visualiza las correlaciones entre las variables clave (daño, disparos, saltos, etc.).
# Instalar y cargar librería corrplot (si no está instalada)
if (!require(corrplot)) install.packages("corrplot", dependencies = TRUE)
library(corrplot)
# Calcular matriz de correlación
library(corrplot)
numerical_data <- data2 %>%
select(daño.recibido, cantidad.disparos, cantidad.de.impactos, cantidad.de.saltos)
cor_matrix <- cor(numerical_data, use = "complete.obs")
# Heatmap
corrplot(cor_matrix, method = "color", addCoef.col = "black",
tl.col = "black", tl.cex = 0.8,
main = "Matriz de Correlación entre Variables")
#Porcentaje de aviones derribados
#Representa la proporción de aviones derribados frente a los que alcanzaron el objetivo.
# Calcular proporciones
derribados <- table(data1$derribado)
labels <- paste(names(derribados),
round(100 * derribados / sum(derribados), 1), "%")
# Gráfico de pastel
pie(derribados,
labels = labels,
main = "Porcentaje de Aviones Derribados (Defensas estaticas)",
col = c("green", "red"))
#Porcentaje de aviones derribados
#Representa la proporción de aviones derribados frente a los que alcanzaron el objetivo.
# Calcular proporciones
derribados <- table(data2$derribado)
labels <- paste(names(derribados),
round(100 * derribados / sum(derribados), 1), "%")
# Gráfico de pastel
pie(derribados,
labels = labels,
main = "Porcentaje de Aviones Derribados (Defensas moviles)",
col = c("green", "red"))
Sys.setlocale("LC_ALL", "es_ES.UTF-8")
# Cargar el archivo CSV
data1 <- read.csv("simulacion_grilla.csv")
# Verificar las primeras filas del archivo para confirmar la carga
head(data1)
# Inicializar contador para derribados
total_derribados <- 0
# Contar cuántos son verdaderos (True)
for (i in 1:nrow(data1)) {
if (data1$derribado[i] == "True") {
total_derribados <- total_derribados + 1
}
}
# Calcular el total de disparos
total_disparos <- sum(data1$cantidad.disparos)
# Calcular el total de daño recibido
total_dano_recibido <- sum(data1$daño.recibido)
# Calcular la cantidad total de impactos
total_impactos <- sum(data1$cantidad.de.impactos)
# Calcular el total de iteraciones (registros)
total_iteraciones <- nrow(data1)
# Crear la tabla
tabla_resumen <- data.frame(
"Total de Iteraciones" = total_iteraciones,
"Cantidad Total de Derribados" = total_derribados,
"Cantidad Total de Disparos" = total_disparos,
"Total de Daño Recibido" = total_dano_recibido,
"Total de Impactos" = total_impactos
)
# Ver la tabla
print(tabla_resumen)
# Instalar y cargar librería ggplot2 (si no está instalada)
if (!require(ggplot2)) install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
# Histograma de la distribución del "daño recibido" con un rango específico
ggplot(data1, aes(x = daño.recibido)) +
geom_histogram(binwidth = 100, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribución del Daño Recibido", x = "Daño Recibido", y = "Frecuencia") +
xlim(-100, 1500) +  # Ajusta el rango del eje X aquí
theme_minimal()
# Histograma de la distribución de los "disparos" con un rango específico
ggplot(data1, aes(x = cantidad.disparos)) +
geom_histogram(binwidth = 10, fill = "green", color = "black", alpha = 0.7) +
labs(title = "Distribución de la Cantidad de Disparos", x = "Cantidad de Disparos", y = "Frecuencia") +
xlim(-10, 100) +  # Ajusta el rango del eje X aquí
theme_minimal()
# Histograma de la distribución de los "impactos" con un rango específico
ggplot(data1, aes(x = cantidad.de.impactos)) +
geom_histogram(binwidth = 2, fill = "red", color = "black", alpha = 0.7) +
labs(title = "Distribución de la Cantidad de Impactos", x = "Cantidad de Impactos", y = "Frecuencia") +
xlim(-2, 20) +  # Ajusta el rango del eje X aquí
theme_minimal()
# Histograma de la distribución de los "saltos" con un rango específico
ggplot(data1, aes(x = cantidad.de.saltos)) +
geom_histogram(binwidth = 10, fill = "purple", color = "black", alpha = 0.7) +
labs(title = "Distribución de la Cantidad de Saltos", x = "Cantidad de Saltos", y = "Frecuencia") +
xlim(50, 200) +  # Ajusta el rango del eje X aquí
theme_minimal()
# Instalar y cargar librería ggplot2 (si no está instalada)
if (!require(ggplot2)) install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
# Graficar la distribución del "daño recibido" con un rango específico
ggplot(data1, aes(x = daño.recibido)) +
geom_density(fill = "blue", alpha = 0.4) +
labs(title = "Distribución del Daño Recibido", x = "Daño Recibido", y = "Densidad") +
xlim(0, 1500) +  # Ajusta el rango del eje X aquí
theme_minimal()
# Graficar la distribución de los "disparos" con un rango específico
ggplot(data1, aes(x = cantidad.disparos)) +
geom_density(fill = "green", alpha = 0.4) +
labs(title = "Distribución de la Cantidad de Disparos", x = "Cantidad de Disparos", y = "Densidad") +
xlim(0, 100) +  # Ajusta el rango del eje X aquí
theme_minimal()
# Graficar la distribución de los "impactos" con un rango específico
ggplot(data1, aes(x = cantidad.de.impactos)) +
geom_density(fill = "red", alpha = 0.4) +
labs(title = "Distribución de la Cantidad de Impactos", x = "Cantidad de Impactos", y = "Densidad") +
xlim(0, 20) +  # Ajusta el rango del eje X aquí
theme_minimal()
# Graficar la distribución de los "saltos" con un rango específico
ggplot(data1, aes(x = cantidad.de.saltos)) +
geom_density(fill = "purple", alpha = 0.4) +
labs(title = "Distribución de la Cantidad de Saltos", x = "Cantidad de Saltos", y = "Densidad") +
xlim(50, 200) +  # Ajusta el rango del eje X aquí
theme_minimal()
#Daño recibido por avión
#Este gráfico muestra la distribución del daño recibido para los modelos A-10 y F-15.
# Boxplot
boxplot(data1$daño.recibido ~ data1$avion,
main = "Distribución del daño recibido por avión",
xlab = "Modelo de Avión",
ylab = "Daño Recibido",
col = c("lightblue", "pink"),
notch = TRUE)
#Disparos vs Impactos por avión
#Compara los disparos realizados y los impactos exitosos para cada modelo de avión.
# Instalar y cargar librería ggplot2 (si no está instalada)
if (!require(ggplot2)) install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
# Sumar disparos e impactos por avión
library(dplyr)
summary_data1 <- data1 %>%
group_by(avion) %>%
summarise(Disparos = sum(cantidad.disparos),
Impactos = sum(cantidad.de.impactos))
# Crear gráfico de barras apiladas
barplot(t(as.matrix(summary_data1[,-1])),
beside = FALSE,
col = c("skyblue", "orange"),
main = "Disparos vs Impactos por Avión",
xlab = "Modelo de Avión",
ylab = "Cantidad",
legend.text = c("Disparos", "Impactos"),
names.arg = summary_data1$avion)
#Saltos vs. Daño Recibido
#Muestra la relación entre los saltos realizados y el daño recibido por los aviones.
# Scatter plot
plot(data1$cantidad.de.saltos, data1$daño.recibido,
main = "Relación entre Saltos y Daño Recibido",
xlab = "Cantidad de Saltos",
ylab = "Daño Recibido",
col = ifelse(data1$avion == "A10", "blue", "red"),
pch = 16)
legend("topright", legend = c("A-10", "F-15"), col = c("blue", "red"), pch = 16)
#Porcentaje de aviones derribados
#Representa la proporción de aviones derribados frente a los que alcanzaron el objetivo.
# Calcular proporciones
derribados <- table(data1$derribado)
labels <- paste(names(derribados),
round(100 * derribados / sum(derribados), 1), "%")
# Gráfico de pastel
pie(derribados,
labels = labels,
main = "Porcentaje de Aviones Derribados (Defensas estaticas)",
col = c("green", "red"))
#Disparos por simulación
#Muestra la distribución de la cantidad de disparos realizados en todas las simulaciones.
# Histograma
hist(data1$cantidad.disparos,
breaks = 20,
main = "Distribución de Disparos por Simulación",
xlab = "Cantidad de Disparos",
col = "lightgreen",
border = "darkgreen")
#Correlaciones entre variables
#Visualiza las correlaciones entre las variables clave (daño, disparos, saltos, etc.).
# Instalar y cargar librería corrplot (si no está instalada)
if (!require(corrplot)) install.packages("corrplot", dependencies = TRUE)
library(corrplot)
# Calcular matriz de correlación
library(corrplot)
numerical_data <- data1 %>%
select(daño.recibido, cantidad.disparos, cantidad.de.impactos, cantidad.de.saltos)
cor_matrix <- cor(numerical_data, use = "complete.obs")
# Heatmap
corrplot(cor_matrix, method = "color", addCoef.col = "black",
tl.col = "black", tl.cex = 0.8,
main = "Matriz de Correlación entre Variables")
# Cargar el archivo CSV
data2 <- read.csv("simulacion_grilla_moviles.csv")
# Verificar las primeras filas del archivo para confirmar la carga
head(data2)
# Inicializar contador para derribados
total_derribados <- 0
# Contar cuántos son verdaderos (True)
for (i in 1:nrow(data2)) {
if (data2$derribado[i] == "True") {
total_derribados <- total_derribados + 1
}
}
# Calcular el total de disparos
total_disparos <- sum(data2$cantidad.disparos)
# Calcular el total de daño recibido
total_dano_recibido <- sum(data2$daño.recibido)
# Calcular la cantidad total de impactos
total_impactos <- sum(data2$cantidad.de.impactos)
# Calcular el total de iteraciones (registros)
total_iteraciones <- nrow(data2)
# Crear la tabla
tabla_resumen2 <- data.frame(
"Total de Iteraciones" = total_iteraciones,
"Cantidad Total de Derribados" = total_derribados,
"Cantidad Total de Disparos" = total_disparos,
"Total de Daño Recibido" = total_dano_recibido,
"Total de Impactos" = total_impactos
)
# Ver la tabla
print(tabla_resumen2)
# Instalar y cargar librería ggplot2 (si no está instalada)
if (!require(ggplot2)) install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
# Histograma de la distribución del "daño recibido" con un rango específico
ggplot(data2, aes(x = daño.recibido)) +
geom_histogram(binwidth = 100, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribución del Daño Recibido", x = "Daño Recibido", y = "Frecuencia") +
xlim(-100, 1500) +  # Ajusta el rango del eje X aquí
theme_minimal()
# Histograma de la distribución de los "disparos" con un rango específico
ggplot(data2, aes(x = cantidad.disparos)) +
geom_histogram(binwidth = 10, fill = "green", color = "black", alpha = 0.7) +
labs(title = "Distribución de la Cantidad de Disparos", x = "Cantidad de Disparos", y = "Frecuencia") +
xlim(-10, 100) +  # Ajusta el rango del eje X aquí
theme_minimal()
# Histograma de la distribución de los "impactos" con un rango específico
ggplot(data2, aes(x = cantidad.de.impactos)) +
geom_histogram(binwidth = 2, fill = "red", color = "black", alpha = 0.7) +
labs(title = "Distribución de la Cantidad de Impactos", x = "Cantidad de Impactos", y = "Frecuencia") +
xlim(-2, 20) +  # Ajusta el rango del eje X aquí
theme_minimal()
# Histograma de la distribución de los "saltos" con un rango específico
ggplot(data2, aes(x = cantidad.de.saltos)) +
geom_histogram(binwidth = 10, fill = "purple", color = "black", alpha = 0.7) +
labs(title = "Distribución de la Cantidad de Saltos", x = "Cantidad de Saltos", y = "Frecuencia") +
xlim(50, 200) +  # Ajusta el rango del eje X aquí
theme_minimal()
# Instalar y cargar librería ggplot2 (si no está instalada)
if (!require(ggplot2)) install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
# Graficar la distribución del "daño recibido" con un rango específico
ggplot(data2, aes(x = daño.recibido)) +
geom_density(fill = "blue", alpha = 0.4) +
labs(title = "Distribución del Daño Recibido", x = "Daño Recibido", y = "Densidad") +
xlim(0, 1500) +  # Ajusta el rango del eje X aquí
theme_minimal()
# Graficar la distribución de los "disparos" con un rango específico
ggplot(data2, aes(x = cantidad.disparos)) +
geom_density(fill = "green", alpha = 0.4) +
labs(title = "Distribución de la Cantidad de Disparos", x = "Cantidad de Disparos", y = "Densidad") +
xlim(0, 100) +  # Ajusta el rango del eje X aquí
theme_minimal()
# Graficar la distribución de los "impactos" con un rango específico
ggplot(data2, aes(x = cantidad.de.impactos)) +
geom_density(fill = "red", alpha = 0.4) +
labs(title = "Distribución de la Cantidad de Impactos", x = "Cantidad de Impactos", y = "Densidad") +
xlim(0, 20) +  # Ajusta el rango del eje X aquí
theme_minimal()
# Graficar la distribución de los "saltos" con un rango específico
ggplot(data2, aes(x = cantidad.de.saltos)) +
geom_density(fill = "purple", alpha = 0.4) +
labs(title = "Distribución de la Cantidad de Saltos", x = "Cantidad de Saltos", y = "Densidad") +
xlim(50, 200) +  # Ajusta el rango del eje X aquí
theme_minimal()
#Daño recibido por avión
#Este gráfico muestra la distribución del daño recibido para los modelos A-10 y F-15.
# Boxplot
boxplot(data2$daño.recibido ~ data2$avion,
main = "Distribución del daño recibido por avión",
xlab = "Modelo de Avión",
ylab = "Daño Recibido",
col = c("lightblue", "pink"),
notch = TRUE)
#Disparos vs Impactos por avión
#Compara los disparos realizados y los impactos exitosos para cada modelo de avión.
# Instalar y cargar librería ggplot2 (si no está instalada)
if (!require(ggplot2)) install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
# Sumar disparos e impactos por avión
library(dplyr)
summary_data2 <- data2 %>%
group_by(avion) %>%
summarise(Disparos = sum(cantidad.disparos),
Impactos = sum(cantidad.de.impactos))
# Crear gráfico de barras apiladas
barplot(t(as.matrix(summary_data2[,-1])),
beside = FALSE,
col = c("skyblue", "orange"),
main = "Disparos vs Impactos por Avión",
xlab = "Modelo de Avión",
ylab = "Cantidad",
legend.text = c("Disparos", "Impactos"),
names.arg = summary_data2$avion)
#Saltos vs. Daño Recibido
#Muestra la relación entre los saltos realizados y el daño recibido por los aviones.
# Scatter plot
plot(data2$cantidad.de.saltos, data2$daño.recibido,
main = "Relación entre Saltos y Daño Recibido",
xlab = "Cantidad de Saltos",
ylab = "Daño Recibido",
col = ifelse(data2$avion == "A10", "blue", "red"),
pch = 16)
legend("topright", legend = c("A-10", "F-15"), col = c("blue", "red"), pch = 16)
#Porcentaje de aviones derribados
#Representa la proporción de aviones derribados frente a los que alcanzaron el objetivo.
# Calcular proporciones
derribados <- table(data2$derribado)
labels <- paste(names(derribados),
round(100 * derribados / sum(derribados), 1), "%")
# Gráfico de pastel
pie(derribados,
labels = labels,
main = "Porcentaje de Aviones Derribados (Defensas moviles)",
col = c("green", "red"))
#Disparos por simulación
#Muestra la distribución de la cantidad de disparos realizados en todas las simulaciones.
# Histograma
hist(data2$cantidad.disparos,
breaks = 20,
main = "Distribución de Disparos por Simulación",
xlab = "Cantidad de Disparos",
col = "lightgreen",
border = "darkgreen")
#Correlaciones entre variables
#Visualiza las correlaciones entre las variables clave (daño, disparos, saltos, etc.).
# Instalar y cargar librería corrplot (si no está instalada)
if (!require(corrplot)) install.packages("corrplot", dependencies = TRUE)
library(corrplot)
# Calcular matriz de correlación
library(corrplot)
numerical_data <- data2 %>%
select(daño.recibido, cantidad.disparos, cantidad.de.impactos, cantidad.de.saltos)
cor_matrix <- cor(numerical_data, use = "complete.obs")
# Heatmap
corrplot(cor_matrix, method = "color", addCoef.col = "black",
tl.col = "black", tl.cex = 0.8,
main = "Matriz de Correlación entre Variables")
